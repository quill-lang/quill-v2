(module
    ()
    (def test ()
        (let (val 0)
            (inst (test test ret4))
            (ap (lambda ((x 0)) (local (x 0))) (val 0))
        )
    )
    (def ret4 ()
        (iu64 3)
    )

    (def make_pair ()
        (iprod (fst (iunit)) (snd (inst (test test ret4))))
    )
    (def fst ()
        (expr
            (lambda ((x 0))
                (mprod
                    ((fst 0) (snd 0))
                    (fst snd)
                    (local (x 0))
                    (local (fst 0))
                )
            )
            (ty (ffunc (pair 0)
                (fprod (fst (funit)) (snd (fu64)))
                (var 0)
            ))
        )
    )
    (def use_fst ()
        (let (pair 0)
            (inst (test test make_pair))
            (ap (inst (test test fst)) (pair 0))
        )
    )

    (def MyPair ()
        (fprod (fst (funit)) (snd (fu64)))
    )
    (def make_my_pair ()
        (expandty
            (inst (test test make_pair))
            (inst (test test MyPair))
        )
    )
    (def use_my_pair ()
        (reducety
            (inst (test test make_my_pair))
            (fprod (fst (funit)) (snd (fu64)))
        )
    )
    (def id_MyPair ()
        (expr
            (lambda ((x 0)) (local (x 0)))
            (ty (ffunc (pair 0) (inst (test test MyPair)) (var 1)))
        )
    )

    (def OptionInt ()
        (fcoprod (Some (fu64)) (None (funit)))
    )
    (def some_int ()
        (lambda ((i 0))
            (expandty
                (icoprod (Some (local (i 0))))
                (inst (test test OptionInt))
            )
        )
    )

    (def unwrap_or_zero ()
        (expr
            (lambda ((pair 0))
                (mcoprod
                    ((val 0) (none 0))
                    (reducety
                        (local (pair 0))
                        (fcoprod (Some (fu64)) (None (funit)))
                    )
                    (
                        (Some (local (val 0)))
                        (None (iu64 0))
                    )
                )
            )
            (ty
                (ffunc (pair 0)
                    (inst (test test OptionInt))
                    (var 2)
                )
            )
        )
    )

    (def Option ()
        (lambda ((T 0))
            (fcoprod (Some (local (T 0))) (None (funit)))
        )
    )
    (def some ()
        (lambda ((T 0))
            (lambda ((x 0))
                (expr
                    (icoprod (Some (local (x 0))))
                    (ty (fcoprod (Some (local (T 0))) (None (funit))))
                )
            )
        )
    )
)
