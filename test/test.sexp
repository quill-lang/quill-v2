(module
  ()
  (def K_combinator (u)
    (pi A imp (sort (univvar u))
      (pi B imp (sort (univvar u))
        (pi x ex (bound 1)
          (pi x ex (bound 1)
            (bound 3))
    )))
    (lam A imp (sort (univvar u))
      (lam B imp (sort (univvar u))
        (lam x ex (bound 1)
          (lam x ex (bound 1)
            (bound 1))
    )))
  )
  (def I_combinator_from_K (u)
    (pi T imp (sort (univvar u))
      (pi x ex (bound 0)
        (bound 1)))
    (lam T imp (sort (univvar u))
      (lam x ex (bound 0)
        (ap (ap (ap (ap
          (inst (test test K_combinator) ((univvar u)))
          (bound 1))
          (bound 1))
          (bound 0))
          (bound 0))
    ))
  )
  (ind Bool () () (sort (univsucc (univzero))) 0 (
    (false (inst (test test Bool) ()))
    (true (inst (test test Bool) ()))
  ))
  (ind Punit () (u) (sort (univvar u)) 0 (
    (star (inst (test test Punit) ((univvar u))))
  ))
  (ind True () () (sort (univzero)) 0 (
    (True.intro (inst (test test True) ()))
  ))
  (ind False () () (sort (univzero)) 0 ())
  (ind Empty () () (sort (univsucc (univzero))) 0 ())
  (ind Eq () (u)
    (pi A imp (sort (univvar u))
      (pi a ex (bound 0)
        (pi b ex (bound 1)
          (sort (univzero)))))
    2 (
    (Eq.refl (pi A imp (sort (univvar u))
      (pi a ex (bound 0)
        (ap (ap (ap (inst (test test Eq) ((univvar u)))
          (bound 1))
          (bound 0))
          (bound 0)))
    ))
  ))
  (ind Heq () (u)
    (pi A imp (sort (univvar u))
      (pi a ex (bound 0)
        (pi B imp (sort (univvar u))
          (pi b ex (bound 0)
            (sort (univzero))))))
    2 (
    (Heq.refl (pi A imp (sort (univvar u))
      (pi a ex (bound 0)
        (ap (ap (ap (ap (inst (test test Heq) ((univvar u)))
          (bound 1))
          (bound 0))
          (bound 1))
          (bound 0)))
    ))
  ))
  (ind Prod () (u v)
    (pi A ex (sort (univsucc (univvar u)))
      (pi B ex (sort (univsucc (univvar u)))
        (sort (univsucc (univmax (univvar u) (univvar v))))))
    2 (
    (Prod.mk (pi A imp (sort (univsucc (univvar u)))
      (pi B imp (sort (univsucc (univvar u)))
        (pi fst ex (bound 1)
          (pi snd ex (bound 1)
            (ap (ap (inst (test test Prod) ((univvar u) (univvar v)))
              (bound 3))
              (bound 2))
      )))))
  ))
  (ind PProd () (u v)
    (pi A ex (sort (univvar u))
      (pi B ex (sort (univvar u))
        (sort (univmax (univvar u) (univvar v)))))
    2 (
    (PProd.mk (pi A imp (sort (univvar u))
      (pi B imp (sort (univvar u))
        (pi fst ex (bound 1)
          (pi snd ex (bound 1)
            (ap (ap (inst (test test PProd) ((univvar u) (univvar v)))
              (bound 3))
              (bound 2))
      )))))
  ))
)
