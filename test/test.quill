def id::{u} : forall (A : Sort u), forall (a : A), A =
fn (A : Sort u), fn (a : A), a

def S_combinator::{u v w} :
forall (A : Sort u), forall (B : Sort v), forall (C : Sort w),
forall (z : forall (a : A), forall (b : B), C), forall (y : forall (a : A), B), forall (z : A), C =
fn (A : Sort u), fn (B : Sort v), fn (C : Sort w),
fn (x : forall (a : A), forall (b : B), C), fn (y : forall (a : A), B), fn (z : A), (x z) (y z)

def K_combinator::{u v} :
forall (A : Sort u), forall (B : Sort v), forall (a : A), forall (b : B), A =
fn (A : Sort u), fn (B : Sort v), fn (a : A), fn (b : B), a

def I_combinator::{u} :
forall (A : Sort u), forall (a : A), A =
fn (A : Sort u), fn (a : A), K_combinator::{u u} A A a a

inductive Punit::{u} 0 : Sort u
| star : Punit::{u}

inductive True 0 : Sort 0
| True.true : True

inductive Bool 0 : Sort 1
| false : Bool
| true : Bool

inductive Eq::{u} 2 : forall (A : Sort u), forall (a : A), forall (b : A), Sort 0
| refl : forall (A : Sort u), forall (a : A), Eq::{u} A a a

inductive Nat 0 : Sort 1
| zero : Nat
| succ : forall (n : Nat), Nat

def is_zero : forall (n : Nat), Bool =
Nat.rec::{1}
    (fn (n : Nat), Bool)
    true
    (fn (n : Nat), fn (previous : Bool), false)

def zero_is_zero : Eq::{1} Bool (is_zero zero) true =
refl::{1} Bool true

def one_is_not_zero : Eq::{1} Bool (is_zero (succ zero)) false =
refl::{1} Bool false

def add : forall (n : Nat), forall (m : Nat), Nat =
fn (n : Nat), Nat.rec::{1} (fn (k : Nat), Nat) n (fn (k : Nat), succ)

def one : Nat = succ zero
def two : Nat = succ (succ zero)
def four : Nat = succ (succ (succ (succ zero)))

def one_plus_zero : Eq::{1} Nat (add zero one) one = refl::{1} Nat one

def two_plus_two_is_four : Eq::{1} Nat (add two two) four = refl::{1} Nat four

def borrowed_one : forall (r : Region), borrowed r, Nat =
fn (r : Region), &r, one

inductive Prod 2 : forall (A : Sort 1), forall (B : Sort 1), Sort 1
| mk : forall (A : Sort 1), forall (B : Sort 1), forall (a : A), forall (b : B), Prod A B

inductive Sum 2 : forall (A : Sort 1), forall (B : Sort 1), Sort 1
| inl : forall (A : Sort 1), forall (B : Sort 1), forall (a : A), Sum A B
| inr : forall (A : Sort 1), forall (B : Sort 1), forall (b : B), Sum A B

def borrow_zero : forall (r : Region), Eq::{1} (Nat.squashed r) (zero.squashed r) (Nat.squash r (&r, zero)) =
fn (r : Region), refl::{1} (Nat.squashed r) (zero.squashed r)

def Bool.squash_eq : forall (r : Region), forall (b : Bool), Eq::{1} Bool (Bool.squash (&r, b)) b =
fn (r : Region), Bool.rec::{0} (fn (b : Bool), Eq::{1} Bool (Bool.squash (&r, b)) b) (refl::{1} Bool false) (refl::{1} Bool true)

// In order to construct things like the clone function on naturals, we need some way to prove that the only values of type `borrowed r, Nat`
// were constructed using `&r, n` for some `n : Nat`. At the moment, this is false a priori.
// Inductive data types use the principle of no confusion to do things like this, which is proven using a recursor.
// However, the `borrowed` keyword has no associated recursor.
